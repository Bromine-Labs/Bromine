---
import Bookmarks from "@/components/Bookmarks.astro";
import History from "@/components/History.astro";
import Settings from "@/components/Settings.astro";
import Suggestions from "@/components/utils/Suggestions.astro";
import { Icon } from "astro-icon/components";
---

<header class="bg-surface border-b border-overlay sticky top-0 bg-bg/50 p-2 flex items-center justify-between space-x-2 z-[25]">
  <div class="flex items-center flex-1 space-x-2 max-w-4xl mx-auto">
    <button
      aria-label="Back"
      id="back-btn"
      class="shadow-md bg-overlay p-1.5 rounded-md hover:bg-highlight-med"
    >
      <Icon name="ph:arrow-left-bold" class="size-4.5" />
    </button>
    <button
      aria-label="Forward"
      id="forward-btn"
      class="shadow-md bg-overlay p-1.5 rounded-md hover:bg-highlight-med"
    >
      <Icon name="ph:arrow-right-bold" class="size-4.5" />
    </button>
    <button
      aria-label="Reload"
      id="reload-btn"
      class="shadow-md bg-overlay p-1.5 rounded-md hover:bg-highlight-med"
    >
      <Icon name="ph:arrow-clockwise-bold" class="size-4.5" />
    </button>

    <div class="flex-1 min-w-0">
      <div class="relative shadow-md bg-overlay flex items-center rounded-md px-3 py-1.5">
        <Icon name="ph:magnifying-glass-bold" class="size-4.5 mr-2" />
        <form id="form" class="flex w-full">
          <input
            spellcheck="false"
            autocomplete="off"
            id="address"
            type="text"
            placeholder="Search the web freely"
            class="bg-transparent w-full focus:outline-none text-sm"
          />
        </form>
        <Suggestions />
      </div>
    </div>


    <button
      aria-label="gmes"
      id="gmes-btn"
      class="shadow-md bg-overlay p-1.5 rounded-md hover:bg-highlight-med"
    >
      <Icon name="ph:game-controller-bold" class="size-4.5" />
    </button>

    <Bookmarks />
		<Settings />

  </div>

  <div class="relative flex-shrink-0">
    <button
      aria-label="Context Menu"
      id="three-dots-btn"
      class="shadow-md bg-overlay p-1.5 rounded-md hover:bg-highlight-med"
    >
      <Icon name="ph:dots-three-outline-vertical-bold" class="size-4.5" />
    </button>
    <div
      id="context-menu"
      class="origin-top-right absolute right-0 mt-2 w-48 bg-overlay shadow-lg rounded-md border border-overlay hidden z-50"
    >
      <button
        id="dev-btn"
        class="flex items-center w-full px-4 py-2 text-left text-sm hover:bg-highlight-med"
      >
        <Icon name="ph:code-bold" class="size-4.5 mr-2" />
        Dev Tools
			</button>
    	<History />
      <button
        id="full-btn"
        class="flex items-center w-full px-4 py-2 text-left text-sm hover:bg-highlight-med"
      >
        <Icon name="ph:arrows-out-bold" class="size-4.5 mr-2" />
        Fullscreen
      </button>
    </div>
  </div>
</header>


<script>
  import { currentFrame } from "@/utils/lethal.ts"
  let devtoolsVisible = false

  const actions = [
    {
      id: "back-btn",
      handler: () => {
        if (currentFrame?.contentWindow) {
          currentFrame.contentWindow.history.back()
        }
      }
    },
    {
      id: "forward-btn",
      handler: () => {
        if (currentFrame?.contentWindow) {
          currentFrame.contentWindow.history.forward()
        }
      }
    },
    {
      id: "reload-btn",
      handler: () => {
        if (currentFrame?.contentWindow) {
          currentFrame.contentWindow.location.reload()
        }
      }
    },
    {
      id: "dev-btn",
      handler: () => {
        const iframe = currentFrame?.contentWindow
        if (!iframe) return

        if (iframe.eruda) {
          devtoolsVisible ? iframe.eruda.hide() : iframe.eruda.show()
          devtoolsVisible = !devtoolsVisible
        } else {
          const script = iframe.document.createElement("script")
          script.src = "https://unpkg.com/eruda@3.4.3/eruda.js"
          script.onload = () => {
            iframe.eruda.init({ tool: ["console", "elements", "sources"] })
            iframe.eruda.show()
            devtoolsVisible = true
          }
          iframe.document.head.appendChild(script)
        }

        document.getElementById("context-menu")?.classList.add("hidden")
      }
    },
    {
      id: "full-btn",
      handler: () => {
        currentFrame.requestFullscreen();
      }
    },
		  {
		    id: "gmes-btn",
		    handler: () => {
		      if (currentFrame?.contentWindow) {
		        currentFrame.src = "/gmes";
		      }
		    }
		},


		/*{
  id: "gmes-btn",
  handler: () => {
    if (!currentFrame) return;

    // Prevent multiple overlays
    if (document.getElementById("gmes-overlay")) return;

    // Create overlay container
    const overlay = document.createElement("div");
    overlay.id = "gmes-overlay";
    overlay.className =
      "fixed inset-0 z-[9999] flex flex-col bg-black";

    // Create iframe
    const iframe = document.createElement("iframe");
    iframe.src = "/gmes";
    iframe.className = "w-full h-full border-none";

    // Create top-right close menu
    const menu = document.createElement("div");
    menu.className =
      "absolute bottom-3 right-3 bg-overlay/80 backdrop-blur-md flex items-center space-x-2 p-2 rounded-xl shadow-lg";

    const closeBtn = document.createElement("button");
    closeBtn.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    `;
    closeBtn.className =
      "p-2 hover:bg-highlight-med rounded-lg transition";
    closeBtn.title = "Close";

    // Close handler
    closeBtn.addEventListener("click", () => {
      overlay.remove();
    });

    // Assemble
    menu.appendChild(closeBtn);
    overlay.appendChild(menu);
    overlay.appendChild(iframe);
    document.body.appendChild(overlay);
  },
}*/
  ]

  actions.forEach(({ id, handler }) => {
    const el = document.getElementById(id)
    if (el) el.addEventListener("click", handler)
  })

  const menuBtn = document.getElementById("three-dots-btn")
  const contextMenu = document.getElementById("context-menu")

  menuBtn?.addEventListener("click", () => {
    contextMenu?.classList.toggle("hidden")
  })

  document.addEventListener("click", (e) => {
    if (
      !menuBtn?.contains(e.target as Node) &&
      !contextMenu?.contains(e.target as Node)
    ) {
      contextMenu?.classList.add("hidden")
    }
  })
</script>
