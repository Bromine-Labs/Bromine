---
import Layout from "../Layout.astro";
import TabStrip from "@/components/TabStrip.astro"; // Import TabStrip
import Lethal from "@/components/Lethal.astro";
import Omnibar from '@/components/Omnibar.astro';
---
<Layout>
  <div class="flex">
    <Lethal/>

              <main class="flex-grow">
        <TabStrip /> {/* Add TabStrip before Omnibar */}
        <Omnibar class="p-8" />
    <div id="frames">
      <!-- Iframes will be dynamically added here -->
    </div>
    </main>

<script>
  import tabStore from '../tabStore.js'; // Path from pages/index.astro to src/tabStore.js

  document.addEventListener('DOMContentLoaded', () => {
    const framesContainer = document.getElementById('frames');
    if (!framesContainer) {
      console.error("index.astro: Frames container (div#frames) not found.");
      return;
    }

    const allTabs = tabStore.getTabs();
    if (allTabs.length === 0) {
        // This should not happen if tabStore initializes with a default tab.
        // If it does, it might indicate an issue with tabStore initialization or import.
        console.warn("index.astro: No tabs found in tabStore. Creating a default tab for safety.");
        // tabStore.addTab('about:blank', 'New Tab', true); // Potentially add one if store is empty
        // allTabs = tabStore.getTabs(); // And re-fetch
        // For now, we'll rely on tabStore having an initial tab.
    }

    allTabs.forEach(tab => {
      let iframe = document.getElementById(tab.iframeId);
      if (!iframe) {
        iframe = document.createElement('iframe');
        iframe.id = tab.iframeId;
        iframe.className = 'w-full h-full'; // Standard classes
        // sandbox attribute can be added here if needed
        framesContainer.appendChild(iframe);
      }
      
      // Always ensure dataset.tabId is set, useful for the load listener
      iframe.dataset.tabId = tab.id;

      // Attach load event listener - once per iframe
      // To prevent attaching multiple listeners if this script runs multiple times (e.g. HMR),
      // ideally, we'd check if a listener is already attached or manage listeners more carefully.
      // For now, assuming it runs once on DOMContentLoaded.
      iframe.removeEventListener('load', handleIframeLoad); // Remove if existing, to be safe
      iframe.addEventListener('load', handleIframeLoad);
      
      // Set initial src only if it's different and the tab expects a specific URL
      // Lethal.astro handles navigations from the address bar for the active tab.
      // This part is mainly for restoring state on page reload for non-active tabs or initial load.
      if (tab.url && iframe.contentWindow && iframe.contentWindow.location.href !== tab.url) {
        // Only set src if it's not about:blank or if it's different from current
        // This helps prevent unnecessary reloads of already loaded pages.
        if (tab.url !== 'about:blank' || iframe.contentWindow.location.href === 'about:blank') {
             // Avoid resetting src for 'about:blank' if it's already there, unless tab.url is also 'about:blank'
            if (iframe.src !== tab.url) { // Check current src attribute before changing
                iframe.src = tab.url;
            }
        }
      } else if (!tab.url && iframe.src !== 'about:blank') {
        // If tab.url is empty/null, default to about:blank
        iframe.src = 'about:blank';
      }


      // Set visibility based on active state
      if (tab.isActive) {
        iframe.style.display = 'block';
      } else {
        iframe.style.display = 'none';
      }
    });

    // Fallback for active tab visibility (already exists, kept for safety)
    const activeTab = tabStore.getActiveTab();
    if (activeTab) {
        const activeIframe = document.getElementById(activeTab.iframeId);
        if (activeIframe && activeIframe.style.display === 'none') {
            activeIframe.style.display = 'block';
        }
    } else if (allTabs.length > 0 && allTabs.find(t => t.isActive)) {
         // This case should ideally be handled by tabStore ensuring single active tab
         console.warn("index.astro: Mismatch in active tab state. Multiple or no active tab found in DOM vs Store. Relying on store for active tab.")
    } else if (allTabs.length > 0) {
        console.warn("index.astro: No active tab found in store, but tabs exist. Activating first tab and reloading.");
        tabStore.setActiveTab(allTabs[0].id); // Activate first tab
        window.location.reload(); // Reload to reflect this change
    }
  });

  function handleIframeLoad(event) {
    const iframe = event.target;
    const tabIdStr = iframe.dataset.tabId;

    if (!tabIdStr) {
      console.warn("index.astro: Iframe loaded without a tabId in dataset.", iframe.id);
      return;
    }
    const tabId = parseInt(tabIdStr, 10);

    // Check if contentDocument is accessible (might not be for cross-origin iframes without proper CORS)
    // However, for UV (proxied) content, it should generally be accessible.
    try {
      if (iframe.contentDocument && iframe.contentDocument.title) {
        const newTitle = iframe.contentDocument.title;
        if (newTitle) {
          // console.log(`Iframe for tab ${tabId} loaded. Title: ${newTitle}`);
          tabStore.updateTabTitle(tabId, newTitle);

          // Option 2: Directly update the title in TabStrip's DOM
          const tabTitleElement = document.querySelector(`div.tab-item-wrapper[data-tab-id='${tabId}'] span.truncate`);
          if (tabTitleElement) {
            tabTitleElement.textContent = newTitle;
            tabTitleElement.title = newTitle; // Update the tooltip/hover title as well
          } else {
            console.warn(`index.astro: Could not find title element for tab ${tabId} in TabStrip to update directly.`);
            // Fallback: If direct DOM update fails, consider reload, but this might cause loop if load event triggers reload.
            // For now, just log a warning. A more robust solution might involve custom events or a reactive framework.
            // window.location.reload(); // Use with caution
          }
        }
      } else {
        // console.warn(`index.astro: Iframe for tab ${tabId} loaded, but contentDocument or title is not accessible. Iframe src: ${iframe.src}`);
        // For about:blank, title might be empty.
        if (iframe.src === 'about:blank' || iframe.src === '') {
            const defaultTitle = tabStore.getTabs().find(t=>t.id === tabId)?.url === 'about:blank' ? 'New Tab' : 'Untitled';
            tabStore.updateTabTitle(tabId, defaultTitle);
            const tabTitleElement = document.querySelector(`div.tab-item-wrapper[data-tab-id='${tabId}'] span.truncate`);
            if (tabTitleElement) {
                tabTitleElement.textContent = defaultTitle;
                tabTitleElement.title = defaultTitle;
            }
        }
      }
    } catch (e) {
      console.warn(`index.astro: Error accessing iframe content for tab ${tabId}. This might be due to cross-origin restrictions if content is not proxied.`, e);
      // Potentially set a generic title like "Error loading title" or keep the existing one.
    }
  }
</script>
              

</Layout>
