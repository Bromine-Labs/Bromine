name: CI

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: read
  pages: write
  id-token: write

env:
  BUILD_PATH: "."

jobs:
  lint:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Cache Bun modules
        uses: actions/cache@v3
        with:
          path: ~/.bun/deps
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
            
      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install deps
        run: bun install
        working-directory: ${{ env.BUILD_PATH }}

      - name: Check
        run: bun run check
        working-directory: ${{ env.BUILD_PATH }}
        
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          
  sync_to_lite:
    name: Sync to Bromine Lite
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean subdirectories (keep only required files)
        run: |
          set -euo pipefail

          find src -type f ! \( \
              -path "src/components/Footer.astro" -o \
              -path "src/assetsgmes.json" -o \
              -path "src/pages/gmes.astro" -o \
              -path "src/utils/gmes.ts" -o \
              -path "src/components/ui/Footer.astro" \
          \) -delete

          rm TODO.md Dockerfile .gitignore .dockerignore
          
          find src -type d -empty -delete
          rm -rf public/*
          for file in $(find src -type f -name "*.astro" -o -name "*.ts"); do
            cp "$file" "$file.bak"
            perl -0777 -pe '
              s{^\s*import\s+Lethal\b[^;]*;\s*}{}mg;
              s{<script\b[^>]*>.*?(?:\./utils/lethal|currentFrame).*?<\/script>\s*}{}isg;
            ' "$file" \
            | sed -E '/\<Lethal[[:space:]]*\/\>/d' \
            | sed '/currentFrame\./d' \
            > "$file.tmp"
            mv "$file.tmp" "$file"
            rm "$file.bak"
          done
          echo "Lite cleanup complete."


      - name: Clone target repo
        run: |
          git clone https://github.com/Bromine-Labs/BromineLite.git target-repo
        env:
          GIT_TERMINAL_PROMPT: 0

      - name: Copy updated content
        run: |
          rm -rf target-repo/*
          for f in *; do
              if [ "$f" != "target-repo" ]; then
                  cp -r "$f" target-repo/
              fi
          done


      - name: Commit and push changes
        run: |
          cd target-repo
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Sync from source repo (Lite version)"
            # Use HTTPS with token for authentication
            git remote set-url origin https://x-access-token:${{ secrets.TOKEN }}@github.com/Bromine-Labs/BromineLite.git
            git push origin main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}



  build:
    name: Build
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install dependencies with Bun
        run: bun install
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build with Astro
        run: bun run build
        working-directory: ${{ env.BUILD_PATH }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  dockerci:
    name: Docker CI
    needs: [lint, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set image tag
        run: echo "IMAGE_TAG=$(date +%s)" >> $GITHUB_ENV

      - name: Build Docker image (timestamped)
        run: docker build . --file Dockerfile --tag ghcr.io/coding4hours/bromine:$IMAGE_TAG

      - name: Build Docker image (latest)
        run: docker build . --file Dockerfile --tag ghcr.io/coding4hours/bromine:latest

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: "coding4Hours"
          password: ${{ secrets.TOKEN }}

      - name: Push Docker container (timestamped)
        run: docker push ghcr.io/coding4hours/bromine:$IMAGE_TAG
        
      - name: Push Docker container (latest)
        run: docker push ghcr.io/coding4hours/bromine:latest



  deploy:
    name: Deploy to GitHub Pages
    needs: [lint, build]
    runs-on: ubuntu-latest
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
